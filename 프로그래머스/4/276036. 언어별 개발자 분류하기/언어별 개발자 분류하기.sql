-- 코드를 작성해주세요
# WITH F AS (
#     SELECT
#         D.ID AS ID,
#         D.SKILL_CODE AS CODE
#     FROM DEVELOPERS AS D
#         JOIN SKILLCODES AS S
#             ON D.SKILL_CODE & S.CODE = S.CODE AND S.CATEGORY = 'Front End'
# ), P AS (
#     SELECT
#         D.ID AS ID,
#         D.SKILL_CODE AS CODE
#     FROM DEVELOPERS AS D
#         JOIN SKILLCODES AS S
#             ON D.SKILL_CODE & S.CODE = S.CODE AND S.NAME = 'Python'
#         JOIN SKILLCODES AS BS
#             ON D.SKILL_CODE & BS.CODE = BS.CODE AND BS.CATEGORY = 'Front End'
# ), C AS (
#     SELECT
#         D.ID AS ID,
#         D.SKILL_CODE AS CODE
#     FROM DEVELOPERS AS D
#         JOIN SKILLCODES AS S
#             ON D.SKILL_CODE & S.CODE = S.CODE AND S.NAME = 'C#'
# )

# SELECT
#     CASE
#         WHEN ID IN (SELECT ID FROM P) THEN 'A'
#         WHEN ID IN (SELECT ID FROM C) THEN 'B'
#         WHEN ID IN (SELECT ID FROM F) THEN 'C'
#         ELSE NULL
#     END AS GRADE,
#     ID,
#     EMAIL
# FROM DEVELOPERS
# HAVING GRADE IS NOT NULL
# ORDER BY GRADE, ID





WITH FRONT AS (
SELECT SUM(CODE) CODE
FROM SKILLCODES
WHERE CATEGORY='Front End'),GRADES AS(
SELECT CASE WHEN SKILL_CODE& (SELECT * FROM FRONT ) AND SKILL_CODE&(SELECT CODE FROM SKILLCODES WHERE NAME='Python')>0 THEN 'A'
WHEN SKILL_CODE&(SELECT CODE FROM SKILLCODES WHERE NAME='C#')>0 THEN 'B'
WHEN SKILL_CODE& (SELECT * FROM FRONT) >0 THEN 'C'
END AS GRADE
,ID,EMAIL
FROM DEVELOPERS
)

SELECT GRADE,ID,EMAIL
FROM GRADES
WHERE GRADE IS NOT NULL
ORDER BY GRADE,ID;